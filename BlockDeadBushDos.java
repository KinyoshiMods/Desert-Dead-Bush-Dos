/** code generated by Kinyoshi */
package net.minecraft.src;

import java.util.Random;

public class BlockDeadBushDos extends BlockFlower
{
    protected BlockDeadBushDos(int par1)
    {
        super(par1, Material.wood);
        this.setBlockBounds(0.5F - 0.4F, 0.0F, 0.5F - 0.4F, 0.5F + 0.4F, 0.8F, 0.5F + 0.4F);
    }

    /**
     * Checks to see if its valid to put this block at the specified coordinates. Args: world, x, y, z
     */
    public boolean canPlaceBlockAt(World par1World, int par2, int par3, int par4)
    {
        int var5 = par1World.getBlockId(par2, par3 - 1, par4);
        return var5 == this.blockID ? true : (var5 != Block.sand.blockID ? false : (par1World.getBlockMaterial(par2 - 1, par3 - 1, par4) == Material.sand ? true : (par1World.getBlockMaterial(par2 + 1, par3 - 1, par4) == Material.sand ? true : (par1World.getBlockMaterial(par2, par3 - 1, par4 - 1) == Material.sand ? true : par1World.getBlockMaterial(par2, par3 - 1, par4 + 1) == Material.sand))));
    }

    /**
     * Can this block stay at this position.  Similar to canPlaceBlockAt except gets checked often with plants.
     */
    public boolean canBlockStay(World par1World, int par2, int par3, int par4)
    {
        return this.canPlaceBlockAt(par1World, par2, par3, par4);
    }
    
public int quantityDropped(Random par1Random)
{
         return 1 + par1Random.nextInt(2);
}

public int idDropped(int par1, Random par2Random, int par3)
{
         return Item.stick.itemID;
}

    /**
     * Returns a bounding box from the pool of bounding boxes (this means this box can change after the pool has been
     * cleared to be reused)
     */
    public AxisAlignedBB getCollisionBoundingBoxFromPool(World par1World, int par2, int par3, int par4)
    {
        return null;
    }

    /**
     * Is this block (a) opaque and (b) a full 1m cube?  This determines whether or not to render the shared face of two
     * adjacent blocks and also whether the player can attach torches, redstone wire, etc to this block.
     */
    public boolean isOpaqueCube()
    {
        return false;
    }

    /**
     * If this block doesn't render as an ordinary block it will return False (examples: signs, buttons, stairs, etc)
     */
    public boolean renderAsNormalBlock()
    {
        return false;
    }
    
    /**
     * Return whether this block can drop from an explosion.
     */
    public boolean canDropFromExplosion(Explosion par1Explosion)
    {
        return false;
    }

    /**
     * only called by clickMiddleMouseButton , and passed to inventory.setCurrentItem (along with isCreative)
     */
    public int idPicked(World par1World, int par2, int par3, int par4)
    {
        return mod_DeadBushDos.BlockDeadBushDos.blockID;
    }
}

